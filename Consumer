#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>

#ifdef _WIN32
#include <windows.h>  // For Windows Sleep
#else
#include <unistd.h>   // For POSIX sleep
#endif

#define BUFFER_SIZE 5

// Shared buffer
int buffer[BUFFER_SIZE];
int in = 0;  // Points to the next free slot
int out = 0; // Points to the next item to consume

sem_t empty;  // Semaphore to track empty slots in buffer
sem_t full;   // Semaphore to track filled slots in buffer
pthread_mutex_t mutex; // Mutex for critical section

int total_produced = 0; // Total items to produce

void *producer(void *param) {
    int item;
    int produced_count = 0;
    
    while (produced_count < total_produced) {
        item = rand() % 100; // Produce a random item
        sem_wait(&empty);  // Wait if no empty slot is available
        pthread_mutex_lock(&mutex);  // Lock the critical section

        // Produce an item
        buffer[in] = item;
        printf("Producer produced: %d\n", item);
        in = (in + 1) % BUFFER_SIZE;

        pthread_mutex_unlock(&mutex);  // Unlock the critical section
        sem_post(&full);  // Signal that a new item is produced

        produced_count++; // Increment produced item count

        #ifdef _WIN32
        Sleep(1000);  // Sleep for 1 second on Windows (in milliseconds)
        #else
        sleep(1);  // Sleep for 1 second on Linux/macOS
        #endif
    }
    
    return NULL;
}

void *consumer(void *param) {
    int item;
    while (1) {
        sem_wait(&full);  // Wait if no full slot is available
        pthread_mutex_lock(&mutex);  // Lock the critical section

        // Consume an item
        item = buffer[out];
        printf("Consumer consumed: %d\n", item);
        out = (out + 1) % BUFFER_SIZE;

        pthread_mutex_unlock(&mutex);  // Unlock the critical section
        sem_post(&empty);  // Signal that a new slot is available

        #ifdef _WIN32
        Sleep(1000);  // Sleep for 1 second on Windows (in milliseconds)
        #else
        sleep(1);  // Sleep for 1 second on Linux/macOS
        #endif
    }
    
    return NULL;
}

int main() {
    pthread_t producer_thread, consumer_thread;

    // Ask user for the number of items to be produced
    printf("Enter the number of items to produce: ");
    scanf("%d", &total_produced);

    // Initialize semaphores and mutex
    sem_init(&empty, 0, BUFFER_SIZE);  // Initially, buffer is empty
    sem_init(&full, 0, 0);  // No items in the buffer at the start
    pthread_mutex_init(&mutex, NULL);

    // Create producer and consumer threads
    pthread_create(&producer_thread, NULL, producer, NULL);
    pthread_create(&consumer_thread, NULL, consumer, NULL);

    // Join threads (in real applications, you would handle cleanup)
    pthread_join(producer_thread, NULL);
    pthread_join(consumer_thread, NULL);

    // Cleanup
    sem_destroy(&empty);
    sem_destroy(&full);
    pthread_mutex_destroy(&mutex);

    return 0;
}
